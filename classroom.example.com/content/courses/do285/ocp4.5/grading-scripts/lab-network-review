#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-network-review - DO280-OCP4
#       Configuring OpenShift Networking Components
#
# SYNOPSIS
#     lab-network-review {start|grade|finish}
#
#        start  - prepare the system for starting the lab
#        finish - perform post-lab finish
#
# DESCRIPTION
#     This script, based on singular argument, either does start, grade, or finish.
#
# CHANGELOG
#   * Tue Oct 20 2020 Michael Phillips <miphilli@redhat.com>
#   - adjusted grading for students who do not follow the solution
#   * Thu Oct 14 2020 James Mighion <jmighion@redhat.com>
#   - added tests and clean up for network policy and timeouts for curl commands
#   * Thu Aug 20 2020 Michael Phillips <miphilli@redhat.com>
#   - added the ocp4_login_as_admin function to the lab_start function
#   * Tue Aug 04 2020 Michael Phillips <miphilli@redhat.com>
#   - hard-coded the RHT_OCP4_WILDCARD_DOMAIN variable
#   * Mon Dec 16 2019 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/root/bin:/usr/local/bin

# This defines which subcommands are supported (start, grade, etc.).
# Usually GEs do not have a grade verb
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)

# Change these variables to match your exercise
this='network-review'
title='Lab: Configuring OpenShift Networking for Applications'
# Do not change these variables
target='workstation'
run_as_root='true'


function lab_start {
  ocp4_print_prereq_header
  ocp4_is_cluster_up
  ocp4_login_as_admin
  ocp4_fail_if_project_exists "${this}"

  ocp4_exit_on_failure

  ocp4_print_setup_header
  ocp4_add_standard_users
  ocp4_add_self_provisioing

  print_line ' Preparing Workstation:'
  ocp4_grab_lab_files

  print_line ' Configuring Certificates:'
  pad ' · Generating unique CA key password'
  if openssl rand -base64 24 > ${labs}/${this}/certs/passphrase.txt; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Setting environment variable in cert. configuration file'
  if RHT_OCP4_WILDCARD_DOMAIN="apps.ocp4.example.com" \
      RHT_OCP4_BASE_DOMAIN=${RHT_OCP4_WILDCARD_DOMAIN#apps.} \
      envsubst < ${labs}/${this}/certs/training.template >> ${labs}/${this}/certs/training.ext; then
    rm -f ${labs}/${this}/certs/training.template
    print_SUCCESS
  else
    print_FAIL
    ocp4_exit_on_failure "It looks like you have already started this exercise. To try this exercise again, run 'lab ${this} finish' followed by 'lab ${this} start'."
  fi

  pad ' · Generating the CA key'
  if openssl genrsa -des3 \
      -out ${labs}/${this}/certs/training-CA.key \
      -passout file:${labs}/${this}/certs/passphrase.txt 2048; then
    print_SUCCESS
  else
    print_FAIL
    exit 1
  fi

  pad ' · Generating CA certificate'
  if openssl req \
      -x509 -new -nodes -sha256 -days 3650 \
      -key ${labs}/${this}/certs/training-CA.key \
      -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=${RHT_OCP4_WILDCARD_DOMAIN#apps.}" \
      -passin file:${labs}/${this}/certs/passphrase.txt \
      -out ${labs}/${this}/certs/training-CA.pem; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Creating private key'
  if openssl genrsa \
      -out ${labs}/${this}/certs/training.key 2048; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Updating privileges on certs directory'
  # if chown -R student:student /home/student/DO280/{labs,solutions}/${this}/certs/; then
  if chown -R student:student ${labs}/${this}/certs/; then
    print_SUCCESS
  else
    print_FAIL
  fi
  ocp4_print_setup_footer
}


function lab_grade {
  local quay_image='quay.io/redhattraining/php-ssl'
  local http_deployment='php-http'
  local http_tag='v1.0'
  local https_deployment='php-https'
  local https_tag='v1.1'
  local cert_path="${labs}/${this}/certs/training.crt"
  local secret='php-certs'
  local ingress_label='network.openshift.io/policy-group=ingress'

  ocp4_print_grade_header

  ocp4_login_as_admin

  pad2 "${this} is present"
  if oc get projects ${this}; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${http_deployment} deployment is present"
  if oc describe deployments ${http_deployment} -n ${this}; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${http_deployment} deployment points to v1.0 of the application"
  local deployment_image=$(oc get deployments ${http_deployment} -n ${this} -o jsonpath='{.spec.template.spec.containers[0].image}')
  if [ "${deployment_image}" == "${quay_image}:${http_tag}" ]; then
    print_PASS
  else
    http_image_sha="$(skopeo inspect docker://${quay_image}:${http_tag} | jq .Digest | sed "s/\"//g")"
    if [ "${deployment_image}" == "${quay_image}@${http_image_sha}" ]; then
      print_PASS
    else
      print_FAIL
    fi
  fi

  pad2 "${http_deployment} deployment uses port 8080"
  local deployment_port="$(oc get deployments ${http_deployment} -n ${this} -o jsonpath='{.spec.template.spec.containers[0].ports[*].containerPort}')"
  if (echo "${deployment_port}" | grep -w "8080" ); then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${http_deployment} container is running"
  local container_status=$(oc get pods -l app=${http_deployment} -n ${this} -o jsonpath='{.items[0].status.phase}')
  if [ -z "${container_status}" ]; then
    container_status=$(oc get pods -l deployment=${http_deployment} -n ${this} -o jsonpath='{.items[0].status.phase}')
  fi
  if [ "${container_status}" == "Running" ]; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "Route for ${http_deployment} is present"
  local route_name=$(oc get routes -l app=${http_deployment} -n ${this} -o jsonpath='{.items[0].spec.host}')
  if [ "${route_name}" == "${http_deployment}.${RHT_OCP4_WILDCARD_DOMAIN}" ]; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "Route for ${http_deployment} is accessible"
  local route_name=$(oc get routes -l app=${http_deployment} -n ${this} -o jsonpath='{.items[0].spec.host}')
  if curl -m 4 "${route_name}"; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "SSL certificate is present"
  if [ -f ${cert_path} ]; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "SSL certificate matches required CN"
  if  openssl x509 -noout -modulus -text -in ${cert_path} | grep "CN = ${https_deployment}.${RHT_OCP4_WILDCARD_DOMAIN}"; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "TLS secret is present"
  if oc describe secrets ${secret} -n ${this}; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${https_deployment} deployment is present"
  if oc describe deployments ${https_deployment} -n ${this}; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${https_deployment} deployment points to v1.1 of the application"
  local deployment_image=$(oc get deployments ${https_deployment} -n ${this} -o jsonpath='{.spec.template.spec.containers[0].image}')
  if [ "${deployment_image}" == "${quay_image}:${https_tag}" ]; then
    print_PASS
  else
    https_image_sha="$(skopeo inspect docker://${quay_image}:${https_tag} | jq .Digest | sed "s/\"//g")"
    if [ "${deployment_image}" == "${quay_image}@${https_image_sha}" ]; then
      print_PASS
    else
      print_FAIL
    fi
  fi

  pad2 "${https_deployment} deployment uses port 8443"
  local deployment_port="$(oc get deployments ${https_deployment} -n ${this} -o jsonpath='{.spec.template.spec.containers[0].ports[*].containerPort}')"
  if (echo "${deployment_port}" | grep -w "8443" ); then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "${https_deployment} container is running"
  local container_status=$(oc get pods -l app=${https_deployment} -n ${this} -o jsonpath='{.items[0].status.phase}')
  if [ -z "${container_status}" ]; then
    container_status=$(oc get pods -l deployment=${https_deployment} -n ${this} -o jsonpath='{.items[0].status.phase}')
  fi
  if [ "${container_status}" == "Running" ]; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "Route for ${https_deployment} is present"
  local route_name=$(oc get routes -l app=${https_deployment} -n ${this} -o jsonpath='{.items[0].spec.host}')
  if [ "${route_name}" == "${https_deployment}.${RHT_OCP4_WILDCARD_DOMAIN}" ]; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "Route for ${https_deployment} is accessible using TLS CA"
  local route_name=$(oc get routes -l app=${https_deployment} -n ${this} -o jsonpath='{.items[0].spec.host}')
  if curl -m 4 --cacert ${labs}/${this}/certs/training-CA.pem "${route_name}"; then
    print_PASS
  else
    print_FAIL
  fi

  pad2 "Network policy denies pod to pod traffic."
  local https_pod=$(oc get pods -n ${this} -o name | grep https | head -n1)
  local http_pod_ip=$(oc get pods -n ${this} -o name | grep http- | head -n1 | xargs oc get -n ${this} -o jsonpath='{.status.podIP}')
  if [ -n "${https_pod}" ] && [ -n "${http_pod_ip}" ]; then
    # Expecting this to fail
    if oc rsh -n ${this} ${https_pod} curl -m 4 ${http_pod_ip}:8080; then
      print_FAIL
    else
      print_PASS
    fi
  else
    print_FAIL
  fi

  pad2 "Default namespace is labeled with ${ingress_label}."
  if oc get namespaces -l network.openshift.io/policy-group=ingress -o name | grep -w "namespace/default"; then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_print_grade_footer
}


function lab_finish {

  ocp4_print_cleanup_header
  ocp4_login_as_admin

  ocp4_delete_project "${this}"

  if oc get namespaces -l network.openshift.io/policy-group=ingress -o name | grep -w "namespace/default"; then
    pad2 "Remove network.openshift.io/policy-group=ingress label from the default project"
    if oc label namespace default network.openshift.io/policy-group-; then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  ocp4_cleanup_lab_files
  ocp4_print_cleanup_footer
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/labtool.do280.shlib

grading_main_program "$@"
