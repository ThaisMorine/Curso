#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-network-ingress - DO280-OCP4
#       Controlling Cluster Network Ingress
#
# SYNOPSIS
#     lab-example {start|finish}
#
#        start  - prepare the system for starting the lab
#        finish - perform post-lab finish
#
# DESCRIPTION
#     This script, based on singular argument, either does start or finish for
#     the Troubleshooting OpenShift Software-defined Networking activity
#
# CHANGELOG
#   * Thu Aug 20 2020 Michael Phillips <miphilli@redhat.com>
#   - added the ocp4_login_as_admin function to the lab_start function
#   * Tue Aug 04 2020 Michael Phillips <miphilli@redhat.com>
#   - hard-coded the RHT_OCP4_WILDCARD_DOMAIN variable
#   * Thu Nov 28 2019 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/root/bin:/usr/local/bin

# This defines which subcommands are supported (start, grade, etc.).
# Usually GEs do not have a grade verb
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish)

# Change these variables to match your exercise
this='network-ingress'
title='Guided Exercise: Controlling Cluster Network Ingress'
# Do not change these variables
target='workstation'
run_as_root='true'


function lab_start {

  ocp4_print_prereq_header
  ocp4_is_cluster_up
  ocp4_login_as_admin
  ocp4_fail_if_project_exists "${this}"

  ocp4_exit_on_failure

  ocp4_print_setup_header
  ocp4_add_standard_users
  ocp4_add_self_provisioing

  print_line ' Preparing Workstation:'
  ocp4_grab_lab_files 'no-solution'

  print_line ' Configuring Certificates:'
  pad ' · Generating unique CA key password'
  if openssl rand -base64 24 > /home/student/DO280/labs/${this}/certs/passphrase.txt; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Setting environment variable in cert. configuration file'
  if RHT_OCP4_WILDCARD_DOMAIN="apps.ocp4.example.com" \
      RHT_OCP4_BASE_DOMAIN=${RHT_OCP4_WILDCARD_DOMAIN#apps.} \
      envsubst < /home/student/DO280/labs/${this}/certs/training.template >> /home/student/DO280/labs/${this}/certs/training.ext; then
    rm -f /home/student/DO280/labs/${this}/certs/training.template
    print_SUCCESS
  else
    print_FAIL
    ocp4_exit_on_failure "It looks like you have already started this exercise. To try this exercise again, run 'lab ${this} finish' followed by 'lab ${this} start'."
  fi

  pad ' · Generating the CA key'
  if openssl genrsa -des3 \
      -out /home/student/DO280/labs/${this}/certs/training-CA.key \
      -passout file:/home/student/DO280/labs/${this}/certs/passphrase.txt 2048; then
    print_SUCCESS
  else
    print_FAIL
    exit 1
  fi

  pad ' · Generating CA certificate'
  if openssl req \
      -x509 -new -nodes -sha256 -days 1825 \
      -key /home/student/DO280/labs/${this}/certs/training-CA.key \
      -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=${RHT_OCP4_WILDCARD_DOMAIN#apps.}" \
      -passin file:/home/student/DO280/labs/${this}/certs/passphrase.txt \
      -out /home/student/DO280/labs/${this}/certs/training-CA.pem; then
    print_SUCCESS
  else
    print_FAIL
  fi

  # pad ' · Copying certificate to the solutions directory'
  # if cp /home/student/DO280/labs/${this}/certs/* /home/student/DO280/solutions/${this}/certs/; then
  #   print_SUCCESS
  # else
  #   print_FAIL
  # fi

  pad ' · Updating privileges on certs directory'
  # if chown -R student:student /home/student/DO280/{labs,solutions}/${this}/certs/; then
  if chown -R student:student /home/student/DO280/labs/${this}/certs/; then
    print_SUCCESS
  else
    print_FAIL
  fi

  ocp4_print_setup_footer
}


function lab_finish {

  ocp4_print_cleanup_header
  ocp4_login_as_admin

  ocp4_delete_project "${this}"

  ocp4_cleanup_lab_files 'no-solution'
  ocp4_print_cleanup_footer
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/labtool.do280.shlib

grading_main_program "$@"
